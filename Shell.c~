#include <sys/types.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

#define AMPERSAND 1
#define PIPE 2
#define INPUT 3
#define OUTPUT 4
int c = 0;

void parse(char *line, char **argv)
{
  while (*line != '\0') {
    while (*line == ' ' || *line == '\t' || *line == '\n'){
      *line++ = '\0';
    }
    *argv++ = line;
    while (*line != '\0' && *line != ' ' && *line != '\t' && *line != '\n'){
      if (*line == '&'){
	c = AMPERSAND;
	*line++ = '\0';
      } 
      if (*line == '|'){
	c = PIPE;
	*line = '\0';
      }
      if (*line == '<'){
	c = INPUT;
	*line = '\0';
      }
      if (*line == '>'){
	c = OUTPUT;
	*line = '\0';
      }
      line++;
    }
  }
  *argv = '\0';
}
/*
void execute (char **argv)
{
  int i = 1;
  while (*argv != NULL){
    if (strcmp(argv[i],"|") == 0){
      pid_t pid;
      int thePipe[2];
      pipe (thePipe);
      if ((pid = fork()) == 0) {
	close (thePipe[1]);
	dup2 (thePipe[0], 0);
	close (thePipe[0]);
	if (execvp(*argv, argv) < 0) {
	  printf("ERROR: exec failed\n");
	  exit(1);
	}
	read (thePipe[0], *argv, (strlen(*argv)+1));
      }
      else if ((pid = fork()) > 0) {
	int status = 0;
	close (thePipe[0]);
	write (thePipe[1], *argv, (strlen(*argv)+1));
	close (thePipe[1]);
	wait(&status);
      }
      else {
	printf("ERROR: forking child process failed\n");
	exit(1);
      }
*/
void execute(char **argv, int c)
{
  pid_t pid;
  int status;
  if ((pid = fork()) < 0) {
    printf("*** ERROR: forking child process failed\n");
    exit(1);
  }
  else if (pid == 0) {
    if (execvp(*argv, argv) < 0) {
      printf("*** ERROR: exec failed\n");
      exit(1);
    }
  }
  else {
    if (c != AMPERSAND){
      wait(&status);
    }
  }
}
int main ()
{
  char line[1024];
  char *argv[100];
  while (1) {
    printf("Shell -> ");
    gets (line);
    printf("\n");
    parse (line, argv);
    if ((strcmp(argv[0], "exit") == 0) || (strcmp(argv[0], "^D") == 0)) {
      exit(0);
    }
    else {
      execute(argv,c);
    }
  }
}
